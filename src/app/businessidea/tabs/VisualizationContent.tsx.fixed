import React, { useEffect } from 'react';
import { DashboardProvider, useDashboard } from './visualization/DashboardContext';
import { FilterBar } from '../../../components/dashboard/FilterBar';
import { KpiCard } from '../../../components/dashboard/KpiCard';
import { DonutCard } from '../../../components/dashboard/DonutCard';
import { LineCard } from '../../../components/dashboard/LineCard';
import { BarCard } from '../../../components/dashboard/BarCard';
import { buildChartContext } from './visualization/chat-bridge';

// Mock ChatboxContext until the real one is implemented
const ChatboxContext = React.createContext<{
  actions: {
    sendMessage: (message: { type: string; content: string; contextData?: any }) => void;
  };
}>({ actions: { sendMessage: () => {} } });

const useChatbox = () => React.useContext(ChatboxContext);

/**
 * Dashboard content component that uses the DashboardContext
 */
function DashboardContent() {
  // Get dashboard state and actions
  const { state, actions } = useDashboard();
  
  // Get chatbox actions for integration
  const { actions: chatActions } = useChatbox();
  
  // Handle explain action for charts
  const handleExplain = (cardId: string) => {
    // Set active card
    actions.setActiveCard(cardId);
    
    // Build context payload for the chatbox
    const contextPayload = buildChartContext({
      cardId,
      metric: cardId.includes('impressions') ? 'impressions' : 
             cardId.includes('spend') ? 'spend' : 
             cardId.includes('creative') ? 'resonance' : 'metric',
      filters: state.filters,
      series: cardId.includes('line') ? state.series['impressions'] : undefined,
      breakdown: cardId.includes('contextual') ? state.breakdowns['contextual'] :
                cardId.includes('device') ? state.breakdowns['device'] :
                cardId.includes('channel') ? state.breakdowns['channel'] :
                cardId.includes('creative') ? state.breakdowns['creative'] : undefined,
      title: cardId
    });
    
    // Send to chatbox if available
    if (chatActions && contextPayload) {
      chatActions.sendMessage({
        type: 'user',
        content: `Explain this ${contextPayload.chartType} chart about ${contextPayload.metric}`,
        contextData: contextPayload
      });
    }
  };
  
  // Handle compare action
  const handleCompare = (cardId: string) => {
    // Set active card
    actions.setActiveCard(cardId);
    
    // Build context payload for the chatbox
    const contextPayload = buildChartContext({
      cardId,
      metric: cardId.includes('impressions') ? 'impressions' : 
             cardId.includes('spend') ? 'spend' : 
             cardId.includes('creative') ? 'resonance' : 'metric',
      filters: state.filters,
      series: cardId.includes('line') ? state.series['impressions'] : undefined,
      breakdown: cardId.includes('contextual') ? state.breakdowns['contextual'] :
                cardId.includes('device') ? state.breakdowns['device'] :
                cardId.includes('channel') ? state.breakdowns['channel'] :
                cardId.includes('creative') ? state.breakdowns['creative'] : undefined,
      title: cardId
    });
    
    // Send to chatbox if available
    if (chatActions && contextPayload) {
      chatActions.sendMessage({
        type: 'user',
        content: `Compare this ${contextPayload.metric} with previous periods`,
        contextData: contextPayload
      });
    }
  };
  
  // Handle export action
  const handleExport = () => {
    actions.exportSnapshot();
  };
  
  return (
    <div className="pb-20">
      {/* Filter Bar */}
      <FilterBar 
        filters={state.filters}
        onFilterChange={actions.setFilters}
        className="mb-4"
      />
      
      {/* KPI Cards */}
      <div className="grid grid-cols-2 gap-3 mb-4">
        {state.kpis.map((kpi) => (
          <KpiCard
            key={kpi.key}
            title={kpi.label}
            value={kpi.value}
            deltaAbs={kpi.deltaAbs}
            deltaPct={kpi.deltaPct}
            unit={kpi.unit}
            color={kpi.color}
            loading={state.loading}
            error={state.error}
            onExplain={() => handleExplain(`kpi-${kpi.key}`)}
          />
        ))}
      </div>
      
      {/* Line Chart */}
      <div className="mb-4">
        <LineCard
          title="Impressions Over Time"
          subtitle="Daily trend of impressions"
          data={state.series['impressions'] || []}
          unit="count"
          color="#0088FE"
          loading={state.loading}
          error={state.error}
          onExplain={() => handleExplain('line-impressions')}
          onCompare={() => handleCompare('line-impressions')}
          onExport={handleExport}
        />
      </div>
      
      {/* Donut Charts */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        <DonutCard
          title="Contextual Categories"
          subtitle="Distribution of impressions by content category"
          data={state.breakdowns['contextual'] || []}
          dimension="contextual"
          loading={state.loading}
          error={state.error}
          onExplain={() => handleExplain('donut-contextual')}
          onCompare={() => handleCompare('donut-contextual')}
          onExport={handleExport}
        />
        
        <DonutCard
          title="Device Distribution"
          subtitle="Impressions by device type"
          data={state.breakdowns['device'] || []}
          dimension="device"
          loading={state.loading}
          error={state.error}
          onExplain={() => handleExplain('donut-device')}
          onCompare={() => handleCompare('donut-device')}
          onExport={handleExport}
        />
      </div>
      
      {/* Bar Charts */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <BarCard
          title="Channel Performance"
          subtitle="Marketing spend by channel"
          data={state.breakdowns['channel'] || []}
          dimension="channel"
          unit="currency"
          loading={state.loading}
          error={state.error}
          onExplain={() => handleExplain('bar-channel')}
          onCompare={() => handleCompare('bar-channel')}
          onExport={handleExport}
        />
        
        <BarCard
          title="Creative Performance"
          subtitle="Resonance score by creative"
          data={state.breakdowns['creative'] || []}
          dimension="creative"
          unit="percentage"
          loading={state.loading}
          error={state.error}
          onExplain={() => handleExplain('bar-creative')}
          onCompare={() => handleCompare('bar-creative')}
          onExport={handleExport}
        />
      </div>
    </div>
  );
}

/**
 * Main VisualizationContent component that wraps the dashboard with providers
 */
export default function VisualizationContent() {
  // Mock user ID for development
  const userId = 'user-123';
  
  return (
    <DashboardProvider userId={userId} useMockData={true}>
      <DashboardContent />
    </DashboardProvider>
  );
}
