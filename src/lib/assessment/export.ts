import { AssessmentResult } from './types';
import { QuizData } from '@/lib/quiz/types';

export interface ExportData {
  profile: QuizData;
  assessment: AssessmentResult;
  exportDate: string;
}

export const exportToPDF = async (data: ExportData): Promise<void> => {
  // This would integrate with a PDF generation library like jsPDF or Puppeteer
  // For now, we'll create a formatted text version
  const content = generateReportContent(data);
  
  const blob = new Blob([content], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = `ai-risk-assessment-${data.profile.jobDescription}-${new Date().toISOString().split('T')[0]}.txt`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  URL.revokeObjectURL(url);
};

export const exportToJSON = (data: ExportData): void => {
  const jsonString = JSON.stringify(data, null, 2);
  const blob = new Blob([jsonString], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = `ai-risk-assessment-${data.profile.jobDescription}-${new Date().toISOString().split('T')[0]}.json`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  URL.revokeObjectURL(url);
};

export const shareResults = async (data: ExportData): Promise<void> => {
  if (navigator.share) {
    try {
      await navigator.share({
        title: 'AI Risk Assessment Results',
        text: `My AI risk assessment shows a ${data.assessment.riskLevel.toLowerCase()} risk level (${data.assessment.riskScore}%) for ${data.profile.jobDescription.replace('-', ' ')} roles.`,
        url: window.location.href
      });
    } catch (error) {
      console.log('Error sharing:', error);
      fallbackShare(data);
    }
  } else {
    fallbackShare(data);
  }
};

const fallbackShare = (data: ExportData): void => {
  const shareText = `My AI risk assessment shows a ${data.assessment.riskLevel.toLowerCase()} risk level (${data.assessment.riskScore}%) for ${data.profile.jobDescription.replace('-', ' ')} roles. Check out your own assessment at ${window.location.origin}`;
  
  if (navigator.clipboard) {
    navigator.clipboard.writeText(shareText).then(() => {
      alert('Assessment summary copied to clipboard!');
    });
  } else {
    // Fallback for older browsers
    const textArea = document.createElement('textarea');
    textArea.value = shareText;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    alert('Assessment summary copied to clipboard!');
  }
};

const generateReportContent = (data: ExportData): string => {
  const { profile, assessment } = data;
  
  return `
AI CAREER RISK ASSESSMENT REPORT
Generated on: ${new Date(data.exportDate).toLocaleDateString()}

PROFILE SUMMARY
===============
Job Role: ${profile.jobDescription.replace('-', ' ')}
Experience: ${profile.experience}
Industry: ${profile.industry}
Location: ${profile.location}
Salary Range: ${profile.salaryRange}
Key Skills: ${profile.skillSet.join(', ')}

RISK ASSESSMENT
===============
Overall Risk Score: ${assessment.riskScore}%
Risk Level: ${assessment.riskLevel}

SUMMARY
${assessment.summary}

RISK FACTORS
============
Automation Risk: ${assessment.factors.automation}%
AI Replacement Risk: ${assessment.factors.aiReplacement}%
Skill Demand: ${assessment.factors.skillDemand}%
Industry Growth: ${assessment.factors.industryGrowth}%

KEY FINDINGS
============
${assessment.keyFindings.map((finding, index) => `${index + 1}. ${finding}`).join('\n')}

RECOMMENDATIONS
===============
${assessment.recommendations.map((rec, index) => `${index + 1}. ${rec}`).join('\n')}

SOURCES
=======
${assessment.sources.length > 0 ? assessment.sources.join('\n') : 'Analysis based on current market trends and AI development patterns.'}

---
Report generated by AI Career Risk Assessment Tool
Last updated: ${assessment.lastUpdated}
  `.trim();
};